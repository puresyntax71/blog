<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post on Valère JEANTET</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Post on Valère JEANTET</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-FR</language>
    <copyright>All rights reserved</copyright>
    <lastBuildDate>Sat, 19 Dec 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Password Management using Password Store</title>
      <link>http://localhost:1313/2015/12/19/password-management-using-password-store/</link>
      <pubDate>Sat, 19 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2015/12/19/password-management-using-password-store/</guid>
      <description>Password Store is a command line utility for managing your passwords. The passwords are stored in an encrypted file which makes use of gpg. It also allows you to use git to track password changes.
pass isn&amp;rsquo;t as feature-rich compared to Last Pass or 1Password though.
Setup Setup is pretty easy. It only requires gpg which can be installed via brew. Optionally, you can install git if you want to track changes in your storage.</description>
    </item>
    
    <item>
      <title>Moving to Jekyll</title>
      <link>http://localhost:1313/2015/12/18/moving-to-jekyll/</link>
      <pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2015/12/18/moving-to-jekyll/</guid>
      <description>Finally moved back to jekyll. Nothing fancy here though. This is hosted again in Github Pages.
I&amp;rsquo;ve made some small modifications on the default template and added the jekyll-archives plugin. I might add some additional plugins and/or modifications (disqus comments). Everything is based on jekyll&amp;rsquo;s documentation. Here are a few things that might be worth noting though:
Bundler It comes with a Gemfile. Executing bundle install or simply bundle will install the dependencies that came with the installation.</description>
    </item>
    
    <item>
      <title>PHP, Coder, and Code Sniffer in OS X</title>
      <link>http://localhost:1313/2015/04/07/php-coder-codesniffer-osx/</link>
      <pubDate>Tue, 07 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2015/04/07/php-coder-codesniffer-osx/</guid>
      <description>PHP I originally used the PHP package bundled with OS X. This doesn&amp;rsquo;t seem to be easily maintainable since you would have an outdated PHP version. I&amp;rsquo;ve since replaced this with homebrew-php specifically the package php54.
Note: If you&amp;rsquo;ve added some configurations in PHP which is most likely located at /etc/php.ini, you might want to copy the custom configurations over to your new PHP ini location which is /usr/local/etc/php/5.4/php.ini in my case.</description>
    </item>
    
    <item>
      <title>PHP 5.4 and PHPDBG in OS X</title>
      <link>http://localhost:1313/2015/04/06/php54-phpdbg-osx/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2015/04/06/php54-phpdbg-osx/</guid>
      <description>I got PHPDBG enabled in PHP 5.4 although I&amp;rsquo;ve never bothered giving it a try. Recently, I decided to play around with it to try to compare it with Xdebug. I tested it with a minimal Drupal installation.
Installation PHP and PHPDBG I use homebrew-php to install PHP 5.4. Versions 5.4+ have the flag --with-phpdbg if you wish to include PHPDBG during installation therefore installation is simply via invoking brew install php54 --with-phpdbg.</description>
    </item>
    
  </channel>
</rss>